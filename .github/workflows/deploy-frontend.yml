name: Deploy Frontend to AWS App Runner

on:
  push:
    branches:
      - master
  workflow_dispatch:  # Manual trigger

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: whatsappbot-frontend
  SERVICE_ARN: arn:aws:apprunner:eu-central-1:948451198730:service/whatsappbot-frontend/55f2dca371004b63b3cfc59e0d8323b7

jobs:
  deploy:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build -f Dockerfile.frontend.prod \
            --build-arg NEXT_PUBLIC_API_URL=https://wnn8pretct.eu-central-1.awsapprunner.com \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to App Runner
        run: |
          echo "Triggering App Runner deployment..."
          aws apprunner start-deployment \
            --service-arn ${{ env.SERVICE_ARN }} \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ Deployment triggered successfully!"
          echo "🔗 Service URL: https://arki44wiab.eu-central-1.awsapprunner.com"

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          for i in {1..60}; do
            STATUS=$(aws apprunner describe-service \
              --service-arn ${{ env.SERVICE_ARN }} \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.Status' \
              --output text)
            
            echo "Deployment status: $STATUS (attempt $i/60)"
            
            if [ "$STATUS" = "RUNNING" ]; then
              echo "✅ Deployment completed successfully!"
              exit 0
            elif [ "$STATUS" = "OPERATION_IN_PROGRESS" ]; then
              sleep 10
            else
              echo "❌ Deployment failed with status: $STATUS"
              aws apprunner list-operations --service-arn ${{ env.SERVICE_ARN }} --region ${{ env.AWS_REGION }} --max-results 5 || true
              exit 1
            fi
          done
          
          echo "⏱️ Deployment timeout - check AWS Console"
          echo "Recent operations:"
          aws apprunner list-operations --service-arn ${{ env.SERVICE_ARN }} --region ${{ env.AWS_REGION }} --max-results 5 || true
          exit 1

      - name: Summary
        run: |
          echo "## 🎨 Frontend Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Frontend deployed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** whatsappbot-frontend" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** eu-central-1 (Frankfurt)" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ steps.build-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://arki44wiab.eu-central-1.awsapprunner.com" >> $GITHUB_STEP_SUMMARY

